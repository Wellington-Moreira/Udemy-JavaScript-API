Anotações Aula JavaScript Udemy!

	SECTION 2
-> Para fazer a comunicação entre front-end e back-end, ou comunicação entre dois back-ends, temos as 3 principais protocolos: SOAP (Simple Object Access Protocol), REST (Representational State Transfer), GraphQl.

	->SOAP: protocolo baseado em XML, muito antigo, presente em sistemas legado.
	-> REST: Estilo arquitetural amplamente utilizado para a criação de APIs web. REST utiliza os métodos HTTP, GET POST PUT DELETE PATCH, para permitir a comunicação entre back e frint-end.
	-> GraphQL: linguagem de consulta para APIs, permite que os clientes solicitem exatamente os dados que precisam e nada mais.


	SECTION 3
-> Atalhos VSCode:
- Fechar todas as pastas na árvore de projetos = "botão de colapse na barra de criar novo arquivo"
- tirar TAB em massa = selecionar texto + shift + TAB
- identificar onde está a chave/colchetes que abre/fecha um outro determinado = ctrl + shift + ]
- pesquisar um arquivo digitando o nome = ctrl + p
- ir pra uma linha específica na página = ctrl + g + "numero da linha"
- renomear a mesma variável em vários locais ao mesmo tempo = seleciona + f2
- abrir terminal = ctrl + '
- abrir um NOVO terminal = ctrl + shift + '
- formatar documento = shift + alt + f
- abrir navegação entre abas já abertas = ctrl + tab
- escrever em várias linhas ao mesmo tempo = alt + click nas linhas
- comentar varias linhas = ctrl + ;
- duplicar linha selecionada = shift + alt + seta pra cima ou baixo
- arrastar linha selecionada = alt + seta pra cima ou baixo




	SECTION EXTRA Git & GitHub

feat: Algo relacionado com features que você adicionar;
fix: Algo para corrigir;
docs: Algo relacionado a documentações, README e afins;
style: Algo relacionado com estilização;
refactor: Algo relacionado com refatoração (refazer);
perf: Algo relacionado a performance;
test: Algo com testes;
chore: Algo para coisas relacionados a build, configs e afins.

COMANDOS GIT
ctrl + L OU clear: limpa o terminal do gitbash
code .: abre o vs code na pasta selecionada
cd "nome da pasta": entra em uma pasta criada
mkdir "nome da pasta": cria uma pasta
git init: inicia o git na pasta que está
git status: mostra o status da branch atual, se tem arquivos alterados ou não
git add <"filename ou .">: adiciona os arquivos selecionados ou todos para ser comittados
git restore --staged <filename ou .>:remove os arquivos selecionados ou todos para não ser comittados
git branch <branchname>: cria uma nova branch
git checkout <branchname>: troca de branch
git checkout -b <branchname>: cria uma nova branch e já troca
git commit -m "<description>": faz o commit com a mensagem
git merge <branchname>: mescla as branches
git branch -D <branchname>: deleta a branch criada
git clone "link": faz download do repositório no GitHub pro local, por https




	SECTION 4

	-> Variáveis em JS:
- var = possível alterar o valor
- let = possível alterar o valor
- const = valor constante


	SECTION 6

	-> Métodos de array
- push = coloca um elemento na última posição do array
- unshift = coloca um elemento na primeira posição do array
- pop = remove o ultimo elemento do array
- shift = remove o primeiro elemento do array
- slice (inicial, final) = retorna o array dividido no range especificado
- splice (a partir desse índice, apaga esse numero de elementos(ou até o final se não especificar)) = retorna o array até 1 elemento antes do indicado
- forEach (variável => {
	função a ser executada  = itera em todos os elementos a função descrita
}


	SECTION 7

	-> Métodos HTTP:
- get: recupera uma lista ou um recurso
- post: cria um novo recurso
- put: atualiza um recurso
- delete: exclui um recurso

Comunicações HTTP tem uma request e um response

	LADO DO CLIENTE
request: 

	Método = get, post, put, delete;

	URI = caminho e params;
	
	Headers =  Authorization, Content-Type, User-Agente;

	Body (só POST e PUT) = dados a serem enviados (JSON)

	Parâmetros de consulta = query: {num1: '2', num2: '3'}



Passo a passo criação de API:

- (pelo menos neste caso): alterar a branch do git
- utilizar comando "npm init" no terminal
- fazer a configuração do "package.json"
- criar arquivo "index.js" para fazer a inicialização da API

	(alterações no código, tem que parar o servidor com ctrl+c no terminal, e iniciar index.js novamente)

	(pra passar um query param na requisição: no final da url + "?key=value&key=value")



	SECTION 10 (MVC)
Componentes de MVC para API (não tem view): Controller, Models, Routes, Services, Middlewares, Index

Controllers: try catch, status e send
Routes: Métodos get, post, put, delete
Services: Método em sí e validações (trhow)
Tests: Testes
Index.js: Inicialização do sistema


			PASSO A PASSO CRIAÇÃO DE API DO ZERO
1- Definir a pasta na área de trabalho
2- Abrir a pasta no vscode
3- comando console "npm init" + "enter" até criar package.json
4- comando "npm i express"
5- comando "npm i jest --save-dev" (conseguir fazer testes)
6- no package.json na parte de "Debug" deixar:
  "scripts": {
    "dev": "node --watch index.js",
    "test": "jest test/*"
  },

7- Criar pasta "src" fora de "node modules"
8- Dentro de "src" criar pasta "routes" + "controllers" + "services"
9- Fora de "src" criar pasta "test"
10- Dentro de "test" criar arquivo "index.js"
11- Dentro de "index" importar express: const express = require("express");
12- Criar variável app e startar express: const app = express();
13- Adicionar: app.use(express.json);
14- adicionar:
app.listen(3000, () =>{
    console.log("Service running on port 3000")
})

ESTRUTURA BASE DA API CONSTRUÍDA

15- Na pasta "routes" criar arquivo "pessoa.js"
16- importar o express: const express = require("express");
17- adicionar quem vai controlar as rotas dos métodos: const router = express.Router();


		TESTES UNITÁRIOS
Disponibiliza uma estrutura de testes (Mocha, Jasmine, Jest, Cucumber);

Prove funções de validação (assert) (Chai, Jasmine, Jest, Unexpected);

Gera, mostra (display) e observa (watch) o resultado dos testes (Mocha, Jasmine, Jest, Karma);

Gera e compara snapshots do componente e estrutura de dados, para garantir que as mudanças anteriores foram como o planejado (Jest, Ava);

Prove mocks, spies, e stubs (Sinon, Jasmine, enzyme, Jest, testdouble);

Gera relatórios de cobertura de código (code coverage) (Istanbul, Jest, Blanket);

Prove um navegador, ou ambiente parecido, com controle sobre seus cenários de execução (Protractor, Phantom, Casper).


Blocos do arquivo de teste:
describe = Grupo de testes
it = Cada teste em específico

beforeAll = roda antes dos its
afterAll = roda depois dos its

expect = valor recebido
toBe = valor esperado